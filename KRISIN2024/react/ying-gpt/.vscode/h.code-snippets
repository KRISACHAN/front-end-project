{
    "React Functional Component": {
        "prefix": "rfc",
        "body": [
            "import { type FC } from 'react';",
            "",
            "interface ${1:${TM_FILENAME_BASE}}Props {",
            "    $2",
            "}",
            "",
            "export const ${1:${TM_FILENAME_BASE}}: FC<${1:${TM_FILENAME_BASE}}Props> = (props) => {",
            "    const { $3 } = props;",
            "",
            "    return (",
            "        <div>",
            "            $4",
            "        </div>",
            "    );",
            "};",
            "",
        ],
        "description": "React Functional Component with TypeScript",
    },
    "React Context": {
        "prefix": "rctx",
        "body": [
            "import { createContext, type FC, type PropsWithChildren, useContext } from 'react';",
            "",
            "interface ${1:Name}ContextType {",
            "    $2",
            "}",
            "",
            "const ${1:Name}Context = createContext<${1:Name}ContextType>({",
            "    $3",
            "});",
            "",
            "export const ${1:Name}Provider: FC<PropsWithChildren> = ({ children }) => {",
            "    return (",
            "        <${1:Name}Context.Provider value={{",
            "            $4",
            "        }}>",
            "            {children}",
            "        </${1:Name}Context.Provider>",
            "    );",
            "};",
            "",
            "export const use${1:Name} = () => useContext(${1:Name}Context);",
            "",
        ],
        "description": "React Context with Provider and Hook",
    },
    "React Hook": {
        "prefix": "rhook",
        "body": [
            "import { useState, useEffect } from 'react';",
            "",
            "export const use${1:Name} = ($2) => {",
            "    const [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState($4);",
            "",
            "    useEffect(() => {",
            "        $5",
            "    }, [$6]);",
            "",
            "    return {",
            "        ${3:state},",
            "        $7",
            "    };",
            "};",
            "",
        ],
        "description": "Custom React Hook",
    },
    "React useState": {
        "prefix": "rus",
        "body": [
            "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState${2:<${3:type}>}($4);",
        ],
        "description": "React useState Hook with TypeScript",
    },
    "React useEffect": {
        "prefix": "rue",
        "body": [
            "useEffect(() => {",
            "    $1",
            "    ${2:return () => {",
            "        $3",
            "    };}",
            "}, [$4]);",
        ],
        "description": "React useEffect Hook",
    },
    "React Memo Component": {
        "prefix": "rmc",
        "body": [
            "import { memo, type FC } from 'react';",
            "",
            "interface ${1:${TM_FILENAME_BASE}}Props {",
            "    $2",
            "}",
            "",
            "export const ${1:${TM_FILENAME_BASE}}: FC<${1:${TM_FILENAME_BASE}}Props> = memo((props) => {",
            "    const { $3 } = props;",
            "",
            "    return (",
            "        <div>",
            "            $4",
            "        </div>",
            "    );",
            "});",
            "",
            "${1:${TM_FILENAME_BASE}}.displayName = '${1:${TM_FILENAME_BASE}}';",
            "",
        ],
        "description": "React Memo Component with TypeScript",
    },
    "Import CSS Module": {
        "prefix": "icss",
        "body": ["import styles from './${TM_FILENAME_BASE}.module.css';"],
        "description": "Import CSS Module",
    },
    "Changeset": {
        "prefix": "cset",
        "body": [
            "---",
            "\"${1:${TM_FILENAME_BASE}}\": ${2|patch,minor,major|}",
            "---",
            "",
            "${3:描述你的改动...}",
            "",
        ],
        "description": "Create a new changeset",
    },
}
