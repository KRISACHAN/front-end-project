{"version":3,"file":"index.system.js","sources":["../src/increase.ts","../src/decrease.ts","../src/others.ts","../src/index.ts"],"sourcesContent":["export const increase = (total: number, value: number): number => total + value;\n","export const decrease = (total: number, value: number): number => total - value;\n","export default {\n    a: 1 as number,\n    b: 2 as number,\n    c: () => 3 as number,\n};\n\nexport const d: number = 4;\nexport const e: number = 5;\n","import { increase } from './increase';\nimport { decrease } from './decrease';\nimport others, { e } from './others';\n\nfunction multiply(total: number, value: number): number {\n  return total * value;\n}\n\nfunction divide(total: number, value: number): number {\n  return total / value;\n}\n\nexport function power(total: number, value: number): number {\n  return total ** value;\n}\n\nlet total: number = others.a;\n\ntotal = increase(total, 10);\ntotal = increase(total, 20);\ntotal = decrease(total, 5);\ntotal = multiply(total, e);\n\nconsole.log(`Total is ${total}`);\n\ntype DataType = 'NULL' | 'UNDEFINED' | 'BOOLEAN' | 'NUMBER' | 'BIGINT' | 'STRING' | 'SYMBOL' | 'OBJECT' | 'ARRAY' | 'DATE' | 'REGEXP' | 'ERROR' | 'MAP' | 'SET' | 'WEAKMAP' | 'WEAKSET';\n\nconst isEqual = (data1: any, data2: any): boolean => data1 === data2;\n\nconst typeMap: Record<string, DataType> = {\n    // 原始类型\n    NULL: 'NULL',\n    UNDEFINED: 'UNDEFINED',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER: 'NUMBER',\n    BIGINT: 'BIGINT',\n    STRING: 'STRING',\n    SYMBOL: 'SYMBOL',\n\n    // 引用类型\n    OBJECT: 'OBJECT',\n    ARRAY: 'ARRAY',\n    DATE: 'DATE',\n    REGEXP: 'REGEXP',\n    ERROR: 'ERROR',\n    MAP: 'MAP',\n    SET: 'SET',\n    WEAKMAP: 'WEAKMAP',\n    WEAKSET: 'WEAKSET',\n};\n\n// 原始类型合集\nconst originTypes: DataType[] = [\n    typeMap.NULL,\n    typeMap.UNDEFINED,\n    typeMap.BOOLEAN,\n    typeMap.NUMBER,\n    typeMap.BIGINT,\n    typeMap.STRING,\n    typeMap.SYMBOL,\n];\n\n// 引用类型合集\nconst referenceTypes: DataType[] = [\n    typeMap.OBJECT,\n    typeMap.ARRAY,\n    typeMap.DATE,\n    typeMap.REGEXP,\n    typeMap.ERROR,\n    typeMap.MAP,\n    typeMap.SET,\n    typeMap.WEAKMAP,\n    typeMap.WEAKSET,\n];\n\n// 引用类型构造器\nconst referenceConstructor: Function[] = [\n    Date,\n    RegExp,\n    Error,\n    Map,\n    Set,\n    WeakMap,\n    WeakSet,\n];\n\n// 获取元素类型\nconst getType = (data: any): DataType => {\n    const rawType = Object.prototype.toString.call(data);\n    return rawType.replace(/^\\[object\\s(.+)\\]$/, '$1').toUpperCase() as DataType;\n};\n\n// 深拷贝\nconst cloneDeep = (data: any, hash = new WeakMap()): any => {\n    // 如果已经存在元素，直接返回，用于解决循环引用的问题\n    if (hash.has(data)) {\n        return data;\n    };\n    const currentType = getType(data);\n    // 原始类型可直接解析\n    if (originTypes.includes(currentType)) {\n        return JSON.parse(JSON.stringify(data));\n    };\n    // 部分引用类型直接重新生成即可\n    if (referenceConstructor.includes(data?.constructor)) {\n        return new data.constructor(data);\n    };\n    // 如果是数组，则循环遍历\n    if (isEqual(currentType, typeMap.ARRAY)) {\n        return data.map((item: any) => cloneDeep(item));\n    };\n    // 如果是对象，也要循环遍历\n    if (isEqual(data, typeMap.OBJECT)) {\n        const res: Record<string, any> = {};\n        Object.entries(data).forEach((item: [string, any]) => {\n            const [key, value] = item;\n            res[key] = cloneDeep(value);\n        });\n        hash.set(data, res);\n    };\n    return data;\n};\n\ncloneDeep(1);\n"],"names":[],"mappings":";;;;;;;kBAAa,WAAW,CAAC,OAAe,UAA0B,QAAQ;;kBCA7D,WAAW,CAAC,OAAe,UAA0B,QAAQ;;ACA1E,yBAAe;YAAA,EACX,GAAG;YAAA,EACH,GAAG;YAAA,EACH,GAAG,MAAM;YAAA;kBAIA,IAAY;;YCHzB,kBAAkB,QAAe,OAAuB;YACtD,SAAO,SAAQ;YAAA;2BAOK,QAAe,OAAuB;YAC1D,SAAO,UAAS;YAAA;YAGlB,IAAI,QAAgB,OAAO;YAE3B,QAAQ,SAAS,OAAO;YACxB,QAAQ,SAAS,OAAO;YACxB,QAAQ,SAAS,OAAO;YACxB,QAAQ,SAAS,OAAO;YAExB,QAAQ,IAAI,YAAY;YAIxB,MAAM,UAAU,CAAC,OAAY,UAAwB,UAAU;YAE/D,MAAM,UAAoC;YAAA,EAEtC,MAAM;YAAA,EACN,WAAW;YAAA,EACX,SAAS;YAAA,EACT,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EAGR,QAAQ;YAAA,EACR,OAAO;YAAA,EACP,MAAM;YAAA,EACN,QAAQ;YAAA,EACR,OAAO;YAAA,EACP,KAAK;YAAA,EACL,KAAK;YAAA,EACL,SAAS;YAAA,EACT,SAAS;YAAA;YAIb,MAAM,cAA0B;YAAA,EAC5B,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA,EACR,QAAQ;YAAA;YAiBZ,MAAM,uBAAmC;YAAA,EACrC;YAAA,EACA;YAAA,EACA;YAAA,EACA;YAAA,EACA;YAAA,EACA;YAAA,EACA;YAAA;YAIJ,MAAM,UAAU,CAAC,SAAwB;YACrC,QAAM,UAAU,OAAO,UAAU,SAAS,KAAK;YAC/C,SAAO,QAAQ,QAAQ,sBAAsB,MAAM;YAAA;YAIvD,MAAM,YAAY,CAAC,MAAW,OAAO,IAAI,cAAmB;YAExD,MAAI,KAAK,IAAI,OAAO;YAChB,WAAO;YAAA;YAEX,QAAM,cAAc,QAAQ;YAE5B,MAAI,YAAY,SAAS,cAAc;YACnC,WAAO,KAAK,MAAM,KAAK,UAAU;YAAA;YAGrC,MAAI,qBAAqB,SAAS,MAAM,cAAc;YAClD,WAAO,IAAI,KAAK,YAAY;YAAA;YAGhC,MAAI,QAAQ,aAAa,QAAQ,QAAQ;YACrC,WAAO,KAAK,IAAI,CAAC,SAAc,UAAU;YAAA;YAG7C,MAAI,QAAQ,MAAM,QAAQ,SAAS;YAC/B,UAAM,MAA2B;YACjC,WAAO,QAAQ,MAAM,QAAQ,CAAC,SAAwB;YAClD,YAAM,CAAC,KAAK,SAAS;YACrB,UAAI,OAAO,UAAU;YAAA;YAEzB,SAAK,IAAI,MAAM;YAAA;YAEnB,SAAO;YAAA;YAGX,UAAU;;;;;;;;"}